{"message":"`{closure@src/main.rs:95:24: 95:26}` doesn't implement `Debug`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/depauli1/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cool_asserts-2.0.3/src/assert_panics.rs","byte_start":4359,"byte_end":4365,"line_start":142,"line_end":142,"column_start":33,"column_end":39,"is_primary":true,"text":[{"text":"                returned debug: result,","highlight_start":33,"highlight_end":39}],"label":"`{closure@src/main.rs:95:24: 95:26}` cannot be formatted using `{:?}` because it doesn't implement `Debug`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/depauli1/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs","byte_start":2225,"byte_end":2259,"line_start":61,"line_end":61,"column_start":38,"column_end":72,"is_primary":false,"text":[{"text":"        $crate::panicking::panic_fmt($crate::const_format_args!($($t)+));","highlight_start":38,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/depauli1/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cool_asserts-2.0.3/src/assertion_failure.rs","byte_start":3456,"byte_end":4293,"line_start":118,"line_end":139,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        panic!(","highlight_start":9,"highlight_end":16},{"text":"            concat!(","highlight_start":1,"highlight_end":21},{"text":"                \"assertion failed at {file}:{line}: `({message})`\",","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // This inserts a series of \"\\n{}: {}\" fields for (key, value) pairs","highlight_start":1,"highlight_end":85},{"text":"                $($($crate::make_assertion_failure_fmt!($($spec)?),)+)?","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // This inserts a trailing \"\\n{}\" if there is a fmt messag","highlight_start":1,"highlight_end":75},{"text":"                $($($crate::make_assertion_failure_tail!($fmt_pattern))?)?","highlight_start":1,"highlight_end":75},{"text":"            ),","highlight_start":1,"highlight_end":15},{"text":"            $($(stringify!($key), $value,)+)?","highlight_start":1,"highlight_end":46},{"text":"            $($(","highlight_start":1,"highlight_end":17},{"text":"                $crate::indent_write::indentable::Indented{","highlight_start":1,"highlight_end":60},{"text":"                    item: format_args!($fmt_pattern $($fmt)+),","highlight_start":1,"highlight_end":63},{"text":"                    indent: \"  \",","highlight_start":1,"highlight_end":34},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            )?)?","highlight_start":1,"highlight_end":17},{"text":"            message=$message,","highlight_start":1,"highlight_end":30},{"text":"            file=file!(),","highlight_start":1,"highlight_end":26},{"text":"            line=line!(),","highlight_start":1,"highlight_end":26},{"text":"            $(padding = $crate::max!($(stringify!($key).len(),)+),)?","highlight_start":1,"highlight_end":69},{"text":"        )","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/depauli1/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cool_asserts-2.0.3/src/assertion_failure.rs","byte_start":3456,"byte_end":4293,"line_start":118,"line_end":139,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        panic!(","highlight_start":9,"highlight_end":16},{"text":"            concat!(","highlight_start":1,"highlight_end":21},{"text":"                \"assertion failed at {file}:{line}: `({message})`\",","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // This inserts a series of \"\\n{}: {}\" fields for (key, value) pairs","highlight_start":1,"highlight_end":85},{"text":"                $($($crate::make_assertion_failure_fmt!($($spec)?),)+)?","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // This inserts a trailing \"\\n{}\" if there is a fmt messag","highlight_start":1,"highlight_end":75},{"text":"                $($($crate::make_assertion_failure_tail!($fmt_pattern))?)?","highlight_start":1,"highlight_end":75},{"text":"            ),","highlight_start":1,"highlight_end":15},{"text":"            $($(stringify!($key), $value,)+)?","highlight_start":1,"highlight_end":46},{"text":"            $($(","highlight_start":1,"highlight_end":17},{"text":"                $crate::indent_write::indentable::Indented{","highlight_start":1,"highlight_end":60},{"text":"                    item: format_args!($fmt_pattern $($fmt)+),","highlight_start":1,"highlight_end":63},{"text":"                    indent: \"  \",","highlight_start":1,"highlight_end":34},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            )?)?","highlight_start":1,"highlight_end":17},{"text":"            message=$message,","highlight_start":1,"highlight_end":30},{"text":"            file=file!(),","highlight_start":1,"highlight_end":26},{"text":"            line=line!(),","highlight_start":1,"highlight_end":26},{"text":"            $(padding = $crate::max!($(stringify!($key).len(),)+),)?","highlight_start":1,"highlight_end":69},{"text":"        )","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/depauli1/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cool_asserts-2.0.3/src/assertion_failure.rs","byte_start":4391,"byte_end":4460,"line_start":143,"line_end":143,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::assertion_failure!($message $($(, $key $($spec)?: $value)+)?)","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/depauli1/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cool_asserts-2.0.3/src/assert_panics.rs","byte_start":4203,"byte_end":4380,"line_start":139,"line_end":143,"column_start":27,"column_end":14,"is_primary":false,"text":[{"text":"            Ok(result) => $crate::assertion_failure!(","highlight_start":27,"highlight_end":54},{"text":"                \"expression didn't panic\",","highlight_start":1,"highlight_end":43},{"text":"                expression: stringify!($expression),","highlight_start":1,"highlight_end":53},{"text":"                returned debug: result,","highlight_start":1,"highlight_end":40},{"text":"            ),","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/depauli1/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cool_asserts-2.0.3/src/assert_panics.rs","byte_start":5407,"byte_end":5469,"line_start":174,"line_end":174,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        $crate::assert_panics!($expression, |_panic: Box<dyn Any>| {})","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":2933,"byte_end":2980,"line_start":95,"line_end":95,"column_start":9,"column_end":56,"is_primary":false,"text":[{"text":"        assert_panics!(|| contract.stake(user, amount));","highlight_start":9,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_panics!","def_site_span":{"file_name":"/home/depauli1/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cool_asserts-2.0.3/src/assert_panics.rs","byte_start":3989,"byte_end":4015,"line_start":136,"line_end":136,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! assert_panics {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::assert_panics!","def_site_span":{"file_name":"/home/depauli1/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cool_asserts-2.0.3/src/assert_panics.rs","byte_start":3989,"byte_end":4015,"line_start":136,"line_end":136,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! assert_panics {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::assertion_failure!","def_site_span":{"file_name":"/home/depauli1/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cool_asserts-2.0.3/src/assertion_failure.rs","byte_start":3290,"byte_end":3320,"line_start":116,"line_end":116,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"macro_rules! assertion_failure {","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::assertion_failure!","def_site_span":{"file_name":"/home/depauli1/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cool_asserts-2.0.3/src/assertion_failure.rs","byte_start":3290,"byte_end":3320,"line_start":116,"line_end":116,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"macro_rules! assertion_failure {","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic!","def_site_span":{"file_name":"/home/depauli1/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs","byte_start":482,"byte_end":500,"line_start":14,"line_end":14,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic::panic_2021!","def_site_span":{"file_name":"/home/depauli1/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs","byte_start":1765,"byte_end":1785,"line_start":50,"line_end":50,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"pub macro panic_2021 {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::const_format_args!","def_site_span":{"file_name":"/home/depauli1/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":33426,"byte_end":33456,"line_start":978,"line_end":978,"column_start":5,"column_end":35,"is_primary":false,"text":[{"text":"    macro_rules! const_format_args {","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":2948,"byte_end":2950,"line_start":95,"line_end":95,"column_start":24,"column_end":26,"is_primary":false,"text":[{"text":"        assert_panics!(|| contract.stake(user, amount));","highlight_start":24,"highlight_end":26}],"label":"consider calling this closure","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `Debug` is not implemented for closure `{closure@src/main.rs:95:24: 95:26}`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `{closure@src/main.rs:95:24: 95:26}` doesn't implement `Debug`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:95:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        assert_panics!(|| contract.stake(user, amount));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mconsider calling this closure\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`{closure@src/main.rs:95:24: 95:26}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `Debug` is not implemented for closure `{closure@src/main.rs:95:24: 95:26}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `assert_panics` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
